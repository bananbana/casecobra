"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@uploadthing+shared@6.7.4_@uploadthing+mime-types@0.2.10";
exports.ids = ["vendor-chunks/@uploadthing+shared@6.7.4_@uploadthing+mime-types@0.2.10"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@uploadthing+shared@6.7.4_@uploadthing+mime-types@0.2.10/node_modules/@uploadthing/shared/dist/index.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@uploadthing+shared@6.7.4_@uploadthing+mime-types@0.2.10/node_modules/@uploadthing/shared/dist/index.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWED_FILE_TYPES: () => (/* binding */ ALLOWED_FILE_TYPES),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   FILESIZE_UNITS: () => (/* binding */ FILESIZE_UNITS),\n/* harmony export */   FetchContext: () => (/* binding */ FetchContext),\n/* harmony export */   FetchError: () => (/* binding */ FetchError),\n/* harmony export */   INTERNAL_DO_NOT_USE__fatalClientError: () => (/* binding */ INTERNAL_DO_NOT_USE__fatalClientError),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   InvalidFileSizeError: () => (/* binding */ InvalidFileSizeError),\n/* harmony export */   InvalidFileTypeError: () => (/* binding */ InvalidFileTypeError),\n/* harmony export */   InvalidJsonError: () => (/* binding */ InvalidJsonError),\n/* harmony export */   InvalidRouteConfigError: () => (/* binding */ InvalidRouteConfigError),\n/* harmony export */   InvalidURLError: () => (/* binding */ InvalidURLError),\n/* harmony export */   RetryError: () => (/* binding */ RetryError),\n/* harmony export */   UnknownFileTypeError: () => (/* binding */ UnknownFileTypeError),\n/* harmony export */   UploadThingError: () => (/* binding */ UploadThingError),\n/* harmony export */   ValidACLs: () => (/* binding */ ValidACLs),\n/* harmony export */   ValidContentDispositions: () => (/* binding */ ValidContentDispositions),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   asArray: () => (/* binding */ asArray),\n/* harmony export */   bytesToFileSize: () => (/* binding */ bytesToFileSize),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   contentDisposition: () => (/* binding */ contentDisposition),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   exponentialBackoff: () => (/* binding */ exponentialBackoff),\n/* harmony export */   fetchEff: () => (/* binding */ fetchEff),\n/* harmony export */   fileSizeToBytes: () => (/* binding */ fileSizeToBytes),\n/* harmony export */   fillInputRouteConfig: () => (/* binding */ fillInputRouteConfig),\n/* harmony export */   filterObjectValues: () => (/* binding */ filterObjectValues),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   generateUploadThingURL: () => (/* binding */ generateUploadThingURL),\n/* harmony export */   getDefaultSizeForType: () => (/* binding */ getDefaultSizeForType),\n/* harmony export */   getErrorTypeFromStatusCode: () => (/* binding */ getErrorTypeFromStatusCode),\n/* harmony export */   getFilesFromClipboardEvent: () => (/* binding */ getFilesFromClipboardEvent),\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl),\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl),\n/* harmony export */   getStatusCodeFromError: () => (/* binding */ getStatusCodeFromError),\n/* harmony export */   getTypeFromFileName: () => (/* binding */ getTypeFromFileName),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isRouteArray: () => (/* binding */ isRouteArray),\n/* harmony export */   objectKeys: () => (/* binding */ objectKeys),\n/* harmony export */   parseRequestJson: () => (/* binding */ parseRequestJson),\n/* harmony export */   parseResponseJson: () => (/* binding */ parseResponseJson),\n/* harmony export */   resolveMaybeUrlArg: () => (/* binding */ resolveMaybeUrlArg),\n/* harmony export */   safeParseJSON: () => (/* binding */ safeParseJSON),\n/* harmony export */   semverLite: () => (/* binding */ semverLite),\n/* harmony export */   signPayload: () => (/* binding */ signPayload),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Effect */ \"(ssr)/./node_modules/.pnpm/effect@3.1.5/node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var std_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! std-env */ \"(ssr)/./node_modules/.pnpm/std-env@3.7.0/node_modules/std-env/dist/index.mjs\");\n/* harmony import */ var _uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/mime-types */ \"(ssr)/./node_modules/.pnpm/@uploadthing+mime-types@0.2.10/node_modules/@uploadthing/mime-types/dist/index.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Data */ \"(ssr)/./node_modules/.pnpm/effect@3.1.5/node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var effect_Context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Context */ \"(ssr)/./node_modules/.pnpm/effect@3.1.5/node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var effect_Duration__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Duration */ \"(ssr)/./node_modules/.pnpm/effect@3.1.5/node_modules/effect/dist/esm/Duration.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Function */ \"(ssr)/./node_modules/.pnpm/effect@3.1.5/node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_Schedule__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Schedule */ \"(ssr)/./node_modules/.pnpm/effect@3.1.5/node_modules/effect/dist/esm/Schedule.js\");\n\n\n\n\n\n\n\n\n\nconst ValidContentDispositions = [\n    \"inline\",\n    \"attachment\"\n];\nconst ValidACLs = [\n    \"public-read\",\n    \"private\"\n];\n\nclass InvalidRouteConfigError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"InvalidRouteConfig\") {\n    constructor(type, field){\n        const reason = field ? `Expected route config to have a ${field} for key ${type} but none was found.` : `Encountered an invalid route config during backfilling. ${type} was not found.`;\n        super({\n            reason\n        });\n    }\n}\nclass UnknownFileTypeError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"UnknownFileType\") {\n    constructor(fileName){\n        const reason = `Could not determine type for ${fileName}`;\n        super({\n            reason\n        });\n    }\n}\nclass InvalidFileTypeError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"InvalidFileType\") {\n    constructor(fileType, fileName){\n        const reason = `File type ${fileType} not allowed for ${fileName}`;\n        super({\n            reason\n        });\n    }\n}\nclass InvalidFileSizeError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"InvalidFileSize\") {\n    constructor(fileSize){\n        const reason = `Invalid file size: ${fileSize}`;\n        super({\n            reason\n        });\n    }\n}\nclass InvalidURLError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"InvalidURL\") {\n    constructor(attemptedUrl){\n        super({\n            reason: `Failed to parse '${attemptedUrl}' as a URL.`\n        });\n    }\n}\nclass RetryError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"RetryError\") {\n}\n/**\n * @internal\n */ const getRequestUrl = (input)=>{\n    if (input instanceof Request) {\n        return input.url;\n    }\n    return input.toString();\n};\nclass FetchError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"FetchError\") {\n}\nclass InvalidJsonError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"InvalidJsonError\") {\n}\nclass BadRequestError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"BadRequestError\") {\n    getMessage() {\n        if (isObject(this.json)) {\n            if (typeof this.json.message === \"string\") return this.json.message;\n        }\n        return this.message;\n    }\n}\n\nfunction isRouteArray(routeConfig) {\n    return Array.isArray(routeConfig);\n}\nfunction getDefaultSizeForType(fileType) {\n    if (fileType === \"image\") return \"4MB\";\n    if (fileType === \"video\") return \"16MB\";\n    if (fileType === \"audio\") return \"8MB\";\n    if (fileType === \"blob\") return \"8MB\";\n    if (fileType === \"pdf\") return \"4MB\";\n    if (fileType === \"text\") return \"64KB\";\n    return \"4MB\";\n}\n/**\n * This function takes in the user's input and \"upscales\" it to a full config\n *\n * Example:\n * ```ts\n * [\"image\"] => { image: { maxFileSize: \"4MB\", limit: 1 } }\n * ```\n */ const fillInputRouteConfig = (routeConfig)=>{\n    // If array, apply defaults\n    if (isRouteArray(routeConfig)) {\n        return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(routeConfig.reduce((acc, fileType)=>{\n            acc[fileType] = {\n                // Apply defaults\n                maxFileSize: getDefaultSizeForType(fileType),\n                maxFileCount: 1,\n                minFileCount: 1,\n                contentDisposition: \"inline\"\n            };\n            return acc;\n        }, {}));\n    }\n    // Backfill defaults onto config\n    const newConfig = {};\n    for (const key of objectKeys(routeConfig)){\n        const value = routeConfig[key];\n        if (!value) return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new InvalidRouteConfigError(key));\n        const defaultValues = {\n            maxFileSize: getDefaultSizeForType(key),\n            maxFileCount: 1,\n            minFileCount: 1,\n            contentDisposition: \"inline\"\n        };\n        newConfig[key] = {\n            ...defaultValues,\n            ...value\n        };\n    }\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(newConfig);\n};\nconst getTypeFromFileName = (fileName, allowedTypes)=>{\n    const mimeType = (0,_uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_2__.lookup)(fileName);\n    if (!mimeType) {\n        if (allowedTypes.includes(\"blob\")) return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(\"blob\");\n        return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new UnknownFileTypeError(fileName));\n    }\n    // If the user has specified a specific mime type, use that\n    if (allowedTypes.some((type)=>type.includes(\"/\"))) {\n        if (allowedTypes.includes(mimeType)) {\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(mimeType);\n        }\n    }\n    // Otherwise, we have a \"magic\" type eg. \"image\" or \"video\"\n    const type = mimeType.toLowerCase() === \"application/pdf\" ? \"pdf\" : mimeType.split(\"/\")[0];\n    if (!allowedTypes.includes(type)) {\n        // Blob is a catch-all for any file type not explicitly supported\n        if (allowedTypes.includes(\"blob\")) {\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(\"blob\");\n        } else {\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new InvalidFileTypeError(type, fileName));\n        }\n    }\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(type);\n};\nfunction generateUploadThingURL(path) {\n    let host = \"https://uploadthing.com\";\n    if (std_env__WEBPACK_IMPORTED_MODULE_3__.process.env.CUSTOM_INFRA_URL) {\n        host = std_env__WEBPACK_IMPORTED_MODULE_3__.process.env.CUSTOM_INFRA_URL;\n    }\n    return `${host}${path}`;\n}\nconst FILESIZE_UNITS = [\n    \"B\",\n    \"KB\",\n    \"MB\",\n    \"GB\"\n];\nconst fileSizeToBytes = (fileSize)=>{\n    const regex = new RegExp(`^(\\\\d+)(\\\\.\\\\d+)?\\\\s*(${FILESIZE_UNITS.join(\"|\")})$`, \"i\");\n    // make sure the string is in the format of 123KB\n    const match = fileSize.match(regex);\n    if (!match) {\n        return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new InvalidFileSizeError(fileSize));\n    }\n    const sizeValue = parseFloat(match[1]);\n    const sizeUnit = match[3].toUpperCase();\n    const bytes = sizeValue * Math.pow(1024, FILESIZE_UNITS.indexOf(sizeUnit));\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(Math.floor(bytes));\n};\nconst bytesToFileSize = (bytes)=>{\n    if (bytes === 0 || bytes === -1) {\n        return \"0B\";\n    }\n    const i = Math.floor(Math.log(bytes) / Math.log(1000));\n    return `${(bytes / Math.pow(1000, i)).toFixed(2)}${FILESIZE_UNITS[i]}`;\n};\nasync function safeParseJSON(input) {\n    if (typeof input === \"string\") {\n        try {\n            return JSON.parse(input);\n        } catch (err) {\n            console.error(`Error parsing JSON, got '${input}'`);\n            return new Error(`Error parsing JSON, got '${input}'`);\n        }\n    }\n    const text = await input.text();\n    try {\n        return JSON.parse(text ?? \"null\");\n    } catch (err) {\n        console.error(`Error parsing JSON, got '${text}'`);\n        return new Error(`Error parsing JSON, got '${text}'`);\n    }\n}\n/** typesafe Object.keys */ function objectKeys(obj) {\n    return Object.keys(obj);\n}\n/** checks if obj is a valid, non-null object */ function isObject(obj) {\n    return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction asArray(val) {\n    return Array.isArray(val) ? val : [\n        val\n    ];\n}\n/**\n * Filters an object's values based on a predicate\n * @example\n * filterObjectValues({ a: \"a\", b: null }, (v): v is string => v != null)\n * // ^? Record<string, string> { a: \"a\" }\n */ const filterObjectValues = (obj, predicate)=>{\n    return Object.fromEntries(Object.entries(obj).filter(([_, v])=>predicate(v)));\n};\n/** construct content-disposition header */ function contentDisposition(contentDisposition, fileName) {\n    return [\n        contentDisposition,\n        `filename=\"${encodeURI(fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(fileName)}`\n    ].join(\"; \");\n}\nfunction semverLite(required, toCheck) {\n    // Pull out numbers from strings like `6.0.0`, `^6.4`, `~6.4.0`\n    const semverRegex = /(\\d+)\\.?(\\d+)?\\.?(\\d+)?/;\n    const requiredMatch = required.match(semverRegex);\n    if (!requiredMatch?.[0]) {\n        throw new Error(`Invalid semver requirement: ${required}`);\n    }\n    const toCheckMatch = toCheck.match(semverRegex);\n    if (!toCheckMatch?.[0]) {\n        throw new Error(`Invalid semver to check: ${toCheck}`);\n    }\n    const [_1, rMajor, rMinor, rPatch] = requiredMatch;\n    const [_2, cMajor, cMinor, cPatch] = toCheckMatch;\n    if (required.startsWith(\"^\")) {\n        // Major must be equal, minor must be greater or equal\n        if (rMajor !== cMajor) return false;\n        if (rMinor > cMinor) return false;\n        return true;\n    }\n    if (required.startsWith(\"~\")) {\n        // Major must be equal, minor must be equal\n        if (rMajor !== cMajor) return false;\n        if (rMinor !== cMinor) return false;\n        return true;\n    }\n    // Exact match\n    return rMajor === cMajor && rMinor === cMinor && rPatch === cPatch;\n}\nconst getFullApiUrl = (maybeUrl)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n        const base = (()=>{\n            if (typeof window !== \"undefined\") return window.location.origin;\n            if (std_env__WEBPACK_IMPORTED_MODULE_3__.process.env?.VERCEL_URL) return `https://${std_env__WEBPACK_IMPORTED_MODULE_3__.process.env.VERCEL_URL}`;\n            return \"http://localhost:3000\";\n        })();\n        const url = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_1__[\"try\"]({\n            try: ()=>new URL(maybeUrl ?? \"/api/uploadthing\", base),\n            catch: ()=>new InvalidURLError(maybeUrl ?? \"/api/uploadthing\")\n        });\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    });\n/*\n * Returns a full URL to the dev's uploadthing endpoint\n * Can take either an origin, or a pathname, or a full URL\n * and will return the \"closest\" url matching the default\n * `<VERCEL_URL || localhost>/api/uploadthing`\n */ const resolveMaybeUrlArg = (maybeUrl)=>{\n    return maybeUrl instanceof URL ? maybeUrl : effect_Effect__WEBPACK_IMPORTED_MODULE_1__.runSync(getFullApiUrl(maybeUrl));\n};\n\nconst ALLOWED_FILE_TYPES = [\n    \"image\",\n    \"video\",\n    \"audio\",\n    \"pdf\",\n    \"text\",\n    \"blob\"\n];\n\nconst ERROR_CODES = {\n    // Generic\n    BAD_REQUEST: 400,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    INTERNAL_SERVER_ERROR: 500,\n    INTERNAL_CLIENT_ERROR: 500,\n    // S3 specific\n    TOO_LARGE: 413,\n    TOO_SMALL: 400,\n    TOO_MANY_FILES: 400,\n    KEY_TOO_LONG: 400,\n    // UploadThing specific\n    URL_GENERATION_FAILED: 500,\n    UPLOAD_FAILED: 500,\n    MISSING_ENV: 500,\n    FILE_LIMIT_EXCEEDED: 500\n};\nfunction messageFromUnknown(cause, fallback) {\n    if (typeof cause === \"string\") {\n        return cause;\n    }\n    if (cause instanceof Error) {\n        return cause.message;\n    }\n    if (cause && typeof cause === \"object\" && \"message\" in cause && typeof cause.message === \"string\") {\n        return cause.message;\n    }\n    return fallback ?? \"An unknown error occurred\";\n}\nclass UploadThingError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_0__.TaggedError)(\"UploadThingError\") {\n    constructor(initOpts){\n        const opts = typeof initOpts === \"string\" ? {\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: initOpts\n        } : initOpts;\n        const message = opts.message ?? messageFromUnknown(opts.cause, opts.code);\n        super({\n            message\n        });\n        this.code = opts.code;\n        this.data = opts.data;\n        if (opts.cause instanceof Error) {\n            this.cause = opts.cause;\n        } else if (isObject(opts.cause) && typeof opts.cause.status === \"number\" && typeof opts.cause.statusText === \"string\") {\n            this.cause = new Error(`Response ${opts.cause.status} ${opts.cause.statusText}`);\n        } else if (typeof opts.cause === \"string\") {\n            this.cause = new Error(opts.cause);\n        } else {\n            this.cause = opts.cause;\n        }\n    }\n    static toObject(error) {\n        return {\n            code: error.code,\n            message: error.message,\n            data: error.data\n        };\n    }\n    static serialize(error) {\n        return JSON.stringify(UploadThingError.toObject(error));\n    }\n}\nfunction getErrorTypeFromStatusCode(statusCode) {\n    for (const [code, status] of Object.entries(ERROR_CODES)){\n        if (status === statusCode) {\n            return code;\n        }\n    }\n    return \"INTERNAL_SERVER_ERROR\";\n}\nfunction getStatusCodeFromError(error) {\n    return ERROR_CODES[error.code] ?? 500;\n}\nconst INTERNAL_DO_NOT_USE__fatalClientError = (e)=>new UploadThingError({\n        code: \"INTERNAL_CLIENT_ERROR\",\n        message: \"Something went wrong. Please report this to UploadThing.\",\n        cause: e\n    });\n\nclass FetchContext extends effect_Context__WEBPACK_IMPORTED_MODULE_4__.Tag(\"uploadthing/FetchContext\")() {\n}\n// Temporary Effect wrappers below.\n// TODO should be refactored with much love\n// TODO handle error properly\nconst fetchEff = (input, init)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.flatMap(FetchContext, ({ fetch, baseHeaders })=>{\n        const reqInfo = {\n            url: input.toString(),\n            method: init?.method,\n            body: init?.body,\n            headers: {\n                ...filterObjectValues(baseHeaders, (v)=>v != null),\n                ...init?.headers\n            }\n        };\n        return effect_Effect__WEBPACK_IMPORTED_MODULE_1__.tryPromise({\n            try: ()=>fetch(input, {\n                    ...init,\n                    headers: reqInfo.headers\n                }),\n            catch: (error)=>new FetchError({\n                    error,\n                    input: reqInfo\n                })\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.map((res)=>Object.assign(res, {\n                requestUrl: reqInfo.url\n            })), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.withSpan(\"fetch\", {\n            attributes: {\n                reqInfo\n            }\n        }));\n    });\nconst parseResponseJson = (res)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.tryPromise({\n        try: async ()=>{\n            const json = await res.json();\n            return {\n                json,\n                ok: res.ok,\n                status: res.status\n            };\n        },\n        catch: (error)=>new InvalidJsonError({\n                error,\n                input: res.requestUrl\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.filterOrFail(({ ok })=>ok, ({ json, status })=>new BadRequestError({\n            status,\n            message: `Request to ${res.requestUrl} failed with status ${status}`,\n            json\n        })), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.map(({ json })=>json), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.withSpan(\"parseJson\"));\nconst parseRequestJson = (req)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.tryPromise({\n        try: ()=>req.json(),\n        catch: (error)=>new InvalidJsonError({\n                error,\n                input: req.url\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.withSpan(\"parseRequestJson\"));\n/**\n * Schedule that retries with exponential backoff, up to 1 minute.\n * 10ms * 4^n, where n is the number of retries.\n */ const exponentialBackoff = (0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.pipe)(effect_Schedule__WEBPACK_IMPORTED_MODULE_6__.exponential(effect_Duration__WEBPACK_IMPORTED_MODULE_7__.millis(10), 4), effect_Schedule__WEBPACK_IMPORTED_MODULE_6__.andThenEither(effect_Schedule__WEBPACK_IMPORTED_MODULE_6__.spaced(effect_Duration__WEBPACK_IMPORTED_MODULE_7__.seconds(1))), effect_Schedule__WEBPACK_IMPORTED_MODULE_6__.compose(effect_Schedule__WEBPACK_IMPORTED_MODULE_6__.elapsed), effect_Schedule__WEBPACK_IMPORTED_MODULE_6__.whileOutput(effect_Duration__WEBPACK_IMPORTED_MODULE_7__.lessThanOrEqualTo(effect_Duration__WEBPACK_IMPORTED_MODULE_7__.minutes(1))));\n\nconst generateMimeTypes = (fileTypes)=>{\n    const accepted = fileTypes.map((type)=>{\n        if (type === \"blob\") return \"blob\";\n        if (type === \"pdf\") return \"application/pdf\";\n        if (type.includes(\"/\")) return type;\n        else return `${type}/*`;\n    });\n    if (accepted.includes(\"blob\")) {\n        return [];\n    }\n    return accepted;\n};\nconst generateClientDropzoneAccept = (fileTypes)=>{\n    const mimeTypes = generateMimeTypes(fileTypes);\n    return Object.fromEntries(mimeTypes.map((type)=>[\n            type,\n            []\n        ]));\n};\nfunction getFilesFromClipboardEvent(event) {\n    const dataTransferItems = event.clipboardData?.items;\n    if (!dataTransferItems) return;\n    const files = Array.from(dataTransferItems).reduce((acc, curr)=>{\n        const f = curr.getAsFile();\n        return f ? [\n            ...acc,\n            f\n        ] : acc;\n    }, []);\n    return files;\n}\n/**\n * Shared helpers for our premade components that's reusable by multiple frameworks\n */ const generatePermittedFileTypes = (config)=>{\n    const fileTypes = config ? objectKeys(config) : [];\n    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];\n    return {\n        fileTypes,\n        multiple: maxFileCount.some((v)=>v && v > 1)\n    };\n};\nconst capitalizeStart = (str)=>{\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nconst INTERNAL_doFormatting = (config)=>{\n    if (!config) return \"\";\n    const allowedTypes = objectKeys(config);\n    const formattedTypes = allowedTypes.map((f)=>f === \"blob\" ? \"file\" : f);\n    // Format multi-type uploader label as \"Supports videos, images and files\";\n    if (formattedTypes.length > 1) {\n        const lastType = formattedTypes.pop();\n        return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n    }\n    // Single type uploader label\n    const key = allowedTypes[0];\n    const formattedKey = formattedTypes[0];\n    const { maxFileSize, maxFileCount, minFileCount } = config[key];\n    if (maxFileCount && maxFileCount > 1) {\n        if (minFileCount > 1) {\n            return `${minFileCount} - ${maxFileCount} ${formattedKey}s up to ${maxFileSize}`;\n        } else {\n            return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n        }\n    } else {\n        return `${formattedKey} (${maxFileSize})`;\n    }\n};\nconst allowedContentTextLabelGenerator = (config)=>{\n    return capitalizeStart(INTERNAL_doFormatting(config));\n};\nconst styleFieldToClassName = (styleField, args)=>{\n    if (typeof styleField === \"string\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"string\") return result;\n    }\n    return \"\";\n};\nconst styleFieldToCssObject = (styleField, args)=>{\n    if (typeof styleField === \"object\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"object\") return result;\n    }\n    return {};\n};\nconst contentFieldToContent = (contentField, arg)=>{\n    if (!contentField) return null;\n    if (typeof contentField !== \"function\") return contentField;\n    if (typeof contentField === \"function\") {\n        const result = contentField(arg);\n        return result;\n    }\n};\n\nconst signaturePrefix = \"hmac-sha256=\";\nconst algorithm = {\n    name: \"HMAC\",\n    hash: \"SHA-256\"\n};\nconst signPayload = async (payload, secret)=>{\n    const encoder = new TextEncoder();\n    const signingKey = await crypto.subtle.importKey(\"raw\", encoder.encode(secret), algorithm, false, [\n        \"sign\"\n    ]);\n    const signature = await crypto.subtle.sign(algorithm, signingKey, encoder.encode(payload)).then((sig)=>Buffer.from(sig).toString(\"hex\"));\n    return `${signaturePrefix}${signature}`;\n};\nconst verifySignature = async (payload, signature, secret)=>{\n    const sig = signature?.slice(signaturePrefix.length);\n    if (!sig) return false;\n    const encoder = new TextEncoder();\n    const signingKey = await crypto.subtle.importKey(\"raw\", encoder.encode(secret), algorithm, false, [\n        \"verify\"\n    ]);\n    return await crypto.subtle.verify(algorithm, signingKey, Uint8Array.from(Buffer.from(sig, \"hex\")), encoder.encode(payload));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@uploadthing+shared@6.7.4_@uploadthing+mime-types@0.2.10/node_modules/@uploadthing/shared/dist/index.js\n");

/***/ })

};
;